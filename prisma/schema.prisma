// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Commands to know:
// `npx prisma generate` - update TypeScript definitions based on this schema
// `npx prisma db push` - push the schema changes to the database
// `npx prisma studio` - open the Studio, which allows you to edit the schema.
// `npx prisma migrate reset` - reset the migrations to the last version. This will reset the DB and run the seed script
// `npx prisma migrate dev --name <descriptive-name>` - generate a migration file for any changes you make to the schema (this will be committed).

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique(map: "User.email_unique")
  firstName String
  discordId String?
  kitId     String?
  role      String     @default("MEMBER")
  team      String
  password  Password?
  passkeys  Passkey[]
  calls     Call[]
  sessions  Session[]
  postReads PostRead[]

  @@index([team])
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Call {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  keywords    String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  base64      String
}

model PostRead {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  clientId  String?
  postSlug  String

  @@index([userId, postSlug])
  @@index([clientId, postSlug])
  @@index([postSlug, createdAt])
  @@index([createdAt, userId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}
